version: '3'

vars:
    DC_FILE: -f ./docker-compose.yml
    PROD_APP_TARGET: app_prod
    PROD_APP_TAG: jackobsmonarch/tg-app:latest
    PROD_CADDY_TARGET: caddy_prod
    PROD_CADDY_TAG: jackobsmonarch/tg-app-caddy:latest

tasks:
    default:
        cmd: task --list

    up:
        desc: Alias for `docker compose {{.DC_FILE}} up -d {{.CLI_ARGS}}`
        cmd: docker compose {{.DC_FILE}} up -d {{.CLI_ARGS}}

    ps:
        desc: Alias for `docker compose {{.DC_FILE}} ps`
        cmd: docker compose {{.DC_FILE}} ps

    shell:
        desc: Alias for `docker compose {{.DC_FILE}} exec app bash`
        cmd: docker compose {{.DC_FILE}} exec app bash

    down:
        desc: Alias for `docker compose {{.DC_FILE}} down`
        cmd: docker compose {{.DC_FILE}} down {{.CLI_ARGS}}

    build:
        desc: Alias for `docker compose {{.DC_FILE}} build {{.CLI_ARGS}}`
        cmd: docker compose {{.DC_FILE}} build {{.CLI_ARGS}}

    logs:
        desc: Alias for `docker compose {{.DC_FILE}} logs -f {{.CLI_ARGS}}`
        cmd: docker compose {{.DC_FILE}} logs -f {{.CLI_ARGS}}

    push-app:
        desc: Build docker image with target `{{.PROD_APP_TARGET}}`, tag it with `{{.PROD_APP_TAG}}` and push to hub.docker.com
        cmds:
            - docker build --file=./code/Dockerfile --target={{.PROD_APP_TARGET}} --tag={{.PROD_APP_TAG}} ./code
            - docker push {{.PROD_APP_TAG}}

    push-caddy:
        desc: Build docker image with target `{{.PROD_CADDY_TARGET}}`, tag it with `{{.PROD_CADDY_TAG}}` and push to hub.docker.com
        cmds:
            - docker build --file=./code/Dockerfile --target={{.PROD_CADDY_TARGET}} --tag={{.PROD_CADDY_TAG}} ./code
            - docker push {{.PROD_CADDY_TAG}}

    fix-cs:
        desc: Run cs fixer
        cmd: docker compose {{.DC_FILE}} exec app php vendor/bin/php-cs-fixer fix --config=.php-cs-fixer.dist.php --allow-risky=yes

    phpstan:
        desc: Run phpstan - static code analyzer
        cmd: docker compose {{.DC_FILE}} exec app php vendor/bin/phpstan analyse

    tests:
        desc: Run phpunit all tests
        cmd: docker compose {{.DC_FILE}} exec app php bin/phpunit

    deploy-k8s-loc:
        desc: Deploy app to minikube or docker-desktop cluster
        cmds:
            - kubectl apply -f ./k8s/config-caddy.yml
            - kubectl apply -f ./k8s/deployment-tg-app.yml
            - kubectl apply -f ./k8s/service-tg-app.yml
            - kubectl apply -f ./k8s/ingress.yml

    ruin-k8s-loc:
        desc: Delete all kube conf files from minikube or docker-desktop cluster
        cmds:
            - kubectl delete -f ./k8s/config-caddy.yml
            - kubectl delete -f ./k8s/deployment-tg-app.yml
            - kubectl delete -f ./k8s/service-tg-app.yml
            - kubectl delete -f ./k8s/ingress.yml

    helm-upgrade:
        desc: helm upgrade tg-app helm {{.CLI_ARGS}}
        cmd: helm upgrade tg-app helm {{.CLI_ARGS}}

    helm-install:
        desc: helm install tg-app helm {{.CLI_ARGS}}
        cmd: helm install tg-app helm {{.CLI_ARGS}}

    helm-debug:
        desc: helm template tg-app helm --debug {{.CLI_ARGS}}
        cmd: helm template tg-app helm --debug {{.CLI_ARGS}}

    helm-uninstall:
        desc: helm uninstall tg-app helm {{.CLI_ARGS}}
        cmd: helm uninstall tg-app helm {{.CLI_ARGS}}

    install-cert-manager:
        desc: install cert manager to cluster
        cmd: kubectl apply -f https://github.com/jetstack/cert-manager/releases/download/v1.14.6/cert-manager.yaml {{.CLI_ARGS}}
